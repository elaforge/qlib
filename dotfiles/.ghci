:set stop :list

-- Broken in ghc >=8.4
-- :set -fdefer-type-errors
:set -Wall
:set -Wno-name-shadowing
:set -Wno-unused-top-binds -Wno-missing-signatures
:set -Wno-unused-imports
:set -Wno-duplicate-exports -Wno-unused-do-bind -Wno-orphans
:set -Wno-type-defaults

-- :set -fwarn-identities
-- :set -fwarn-tabs
-- :set -fwarn-incomplete-record-updates
-- :set -fwarn-missing-fields
-- :set -fwarn-unused-matches
-- :set -fwarn-wrong-do-bind
-- :set -fwarn-redundant-constraints
-- :set -fwarn-unused-top-binds

:seti -XOverloadedStrings
:seti -XNumericUnderscores

-- Make the prompt obvious.
:set prompt "\ESC[46m\STX%s>\ESC[39;49m\STX "

-- :R is the same as :r
:def R (\args -> return (":r " ++ args))

-- Foo/Bar.hs -> Foo.Bar
:{
let _ghciMangleFile =
        map (\c -> if c == '/' then '.' else c)
        . System.FilePath.dropExtension
:}

-- This uses :l instead of :load so it will invoke a possible local :l.
-- Arguments get added to scope.  :add looks like it should do this,
-- but it doesn't, because it also changes the imported modules, instead
-- of just adding one.
:{
let _ghciLoadVim arg = do
        home <- System.Environment.getEnv "HOME"
        file <- readFile (home ++ "/.vim/current_hs")
        return $ unlines
            [ ":l *" ++ _ghciMangleFile file ++ " " ++ arg
            , unwords [":module +" ++ m | m <- words arg]
            ]
:}

-- :L loads the file currently edited in vim
:def L _ghciLoadVim
