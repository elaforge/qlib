:set stop :list

-- :seti -W
:set -fwarn-identities
:set -fwarn-tabs
:set -fwarn-incomplete-record-updates
:set -fwarn-missing-fields
:set -fwarn-unused-matches
:set -fwarn-wrong-do-bind
:set -fwarn-redundant-constraints

-- Make the prompt obvious.
:set prompt "\ESC[46m\STX%s>\ESC[39;49m\STX "

-- Doesn't seem to work... because loading a module overrides it?
:seti -XNoMonomorphismRestriction

-- Theoretically convenient, but makes many simple expressions become
-- ambiguous.
:seti -XOverloadedStrings

-- use (?foo x y z) in a sub-expression to get the type of the expr
-- :set -XImplicitParams

-- :R is the same as :r
:def R (\args -> return (":r " ++ args))

-- :L loads the file currently edited in vim

-- Foo/Bar.hs -> Foo.Bar
let mangle_file = map (\c -> if c == '/' then '.' else c) . System.FilePath.dropExtension

-- This uses :l instead of :load so it will invoke a possible local :l.
let load_vim = do { home <- System.Environment.getEnv "HOME"; file <- readFile (home ++ "/.vim/current_hs"); return (":l *" ++ mangle_file file) }

:def L (\_ -> load_vim)
