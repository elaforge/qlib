#!/usr/local/bin/python

import sys, subprocess

maxlines = 16

def main():
    if len(sys.argv) < 2:
        print 'usage: %s cmd args ...' % sys.argv[0]
        print '\tmuffle cmd to produce no more than 16 lines'
        sys.exit(1)
    args = sys.argv[1:]
    try:
        p = subprocess.Popen(args, stdout=subprocess.PIPE,
                stderr=subprocess.PIPE)
    except OSError, exc:
        print "couldn't exec %s: %s" %(args[0], exc)
        sys.exit(1)
    line = 0
    fp = Merged_file(p.stdout, p.stderr)
    for s in fp:
        print s
        line += 1
        if line >= maxlines:
            print '...'
            break
    for s in fp: pass # run out fds
    p.wait()
    sys.exit(p.returncode)

import os, select

class Merged_file:
    bufsz = 1024
    def __init__(self, *fps):
        self.fds = [ fp.fileno() for fp in fps ]
        self.bufs = dict([ (fd, ([], False)) for fd in self.fds ])
    def readline(self):
        while 1:
            if not [ None for (b, eof) in self.bufs.values() if eof == False ]:
                return ''
            for fd, (b, eof) in self.bufs.items():
                b = ''.join(b)
                if eof and b:
                    self.bufs[fd][0][:] = []
                    return b
                elif '\n' in b:
                    s, self.bufs[fd][0][:] = b.split('\n', 1)
                    return s
            for fd in select.select(self.fds, (), ())[0]:
                s = os.read(fd, self.bufsz)
                if not s:
                    self.bufs[fd] = self.bufs[fd][0], True
                else:
                    self.bufs[fd][0].append(s)
    def __iter__(self):
        while 1:
            s = self.readline()
            if not s:
                break
            yield s

            

if __name__ == '__main__':
    main()


